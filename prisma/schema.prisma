generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

// Not resusing the verification token. It's simply safer to keep tokens separate.

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  years                 Year[]
  contributions         Contribution[]
  notes                 Note[]
  wordCountRef          Int?
  notionDetails Json? // The Notion O-Auth response containing access token that is received after posting the temporary code to the auth url.

  // Stripe
  stripeCustomerId String? @unique @map(name: "stripe_customer_id")
  stripePriceId    String? @map(name: "stripe_price_id")

  // Subs
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  // Payment intents
  stripePaymentIntentId String?   @unique @map(name: "stripe_payment_intent_id")
  stripePaymentDate     DateTime?
}

enum NoteType {
  CLACK
  NOTION
  GOOGLEDOC
}

model Note {
  id            String   @id @default(cuid())
  name          String?
  type          NoteType @default(CLACK)
  url           String?
  wordCount     Int?
  userId        String
  data          Json? // I may use an edge KV store
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@unique([url])
}

// ----------------- Graph -----------------

model Year {
  id            String         @id @default(cuid())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  year          String
  total         Int
  start_date    DateTime
  end_date      DateTime
  contributions Contribution[]
}

model Contribution {
  id                String @id @default(cuid())
  year              Year   @relation(fields: [yearId], references: [id], onDelete: Cascade)
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  yearId            String
  contribution_date String
  count             Int
  color             String
  intensity         Int
}
